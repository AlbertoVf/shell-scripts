#!/usr/bin/env python
##? usage : fq [-h] -o {xml,json,yml,yaml} file
##? help  : Python script to convert configuration files

import argparse, subprocess, os
import json, yaml, csv, dicttoxml as xml, xmltodict


class Extension:
    XML = "xml"
    CSV = "csv"
    JSON = "json"
    YAML = "yaml"


def _dump_json(data, output_file):
    json.dump(data, open(output_file, "w"), indent=4)


def _json_csv(data, output_file):
    with open(output_file, "w", newline="") as csv_file:
        csv_writer = csv.writer(csv_file, delimiter=";")
        headers = data[0].keys()
        csv_writer.writerow(headers)
        for item in data:
            csv_writer.writerow(item.values())


def _json_xml(data, output_file):
    open(output_file, "wb").write(xml.dicttoxml(data, attr_type=False))


def _json_yml(data, output_file):
    yaml.dump(data, open(output_file, "w"), default_flow_style=False)


def _load_json(input_file):
    return json.load(open(input_file, "r"))


def _csv_json(input_file):
    with open(input_file, "r", newline="") as csv_file:
        csv_reader = csv.DictReader(csv_file, delimiter=";")
        data = list(csv_reader)
    return data


def _xml_json(input_file):
    xml_data = open(input_file, "r").read()
    return xmltodict.parse(xml_data, disable_entities=True)


def _yml_json(input_file):
    return yaml.safe_load(open(input_file, "r"))


def output(output_format, input_file):
    _file, _input_format = os.path.splitext(input_file)
    _input_format = _input_format[1:]
    output_file = f"{_file}.{output_format}"

    if _input_format == output_format: return
    # ? TRANSFORMAR CUALQUIER FORMATO A UN ARCHIVO JSON TEMPORAL
    if _input_format == Extension.JSON: data = _load_json(input_file)
    elif _input_format == Extension.XML: data = _xml_json(input_file)
    elif _input_format == Extension.YAML: data = _yml_json(input_file)
    elif _input_format == Extension.CSV: data = _csv_json(input_file)
    # ? TRANSFORMAR EL ARCHIVO TEMPORAL EN EL FORMATO DEFINITIVO
    if output_format == Extension.JSON: _dump_json(data, output_file)
    elif output_format == Extension.YAML: _json_yml(data, output_file)
    elif output_format == Extension.XML: _json_xml(data, output_file)
    elif output_format == Extension.CSV: _json_csv(data, output_file)
    print(f"{input_file} -> {output_file}")


def main():
    parser = argparse.ArgumentParser(description="Script para procesar archivos")
    parser.add_argument("file", help="Nombre del archivo")
    parser.add_argument(
        "-o",
        "--output",
        required=True,
        choices=[
            valor
            for clave, valor in Extension.__dict__.items()
            if not clave.startswith("__") and not callable(valor)
        ],
        help="Formato de salida",
    )
    args = parser.parse_args()
    file = args.file
    output_format = args.output
    output(output_format, file)


main()
