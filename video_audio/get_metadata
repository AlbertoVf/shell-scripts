#!/usr/bin/env python
##? help  : Find audio info. Find audio metadata with api and generate ffmpeg to update metadata, copy to clipboard
##? usage : get_metadata [file_song]


def get_metadata(file_path) -> dict:
    import requests
    from mutagen.easyid3 import EasyID3
    from mutagen.mp3 import MP3

    def song_api(song, artist):
        q = f"{song}+{artist}".replace(" ", "+")
        data = requests.get(f"https://api.deezer.com/search?q={q}").json()["data"][0]
        m = {
            "title": data.get("title"),
            "artist": data.get("artist")["name"],
        }

        a_id = data.get("album")["id"]
        data2 = requests.get(f"https://api.deezer.com/album/{a_id}").json()
        m["album"] = data2["title"]
        m["date"] = int(data2["release_date"].split("-")[0])
        m["track"] = next(
            (
                i + 1
                for i, obj in enumerate(data2["tracks"]["data"])
                if obj.get("title") == m["title"]
            ),
            1,
        )
        m["genre"] = ", ".join([item["name"] for item in data2["genres"]["data"]])
        return m

    try:
        audio = MP3(file_path, ID3=EasyID3)
        metadata = audio.items()
        datos = {k: v[0] for k, v in metadata}
        m = {
            "_file": str(file_path),
            "title": datos["title"],
            "artist": datos["artist"],
            "album": datos["album"],
            "date": int(datos["date"]),
            "track": int(datos["tracknumber"]),
            "genre": "",
        }
        m.update(song_api(datos["title"], datos["artist"]))
    except Exception as e:
        pass
    finally:
        return m


def make_ffmpeg_script(metadatos: dict):
    from shlex import quote

    formatted_metadata = []
    for key, value in metadatos.items():
        if key != "_file":
            formatted_metadata.append(f"-metadata {key}={quote(str(value))}")
    file = quote(metadatos.get("_file"))
    return f"ffmpeg -loglevel quiet -i {file} {' '.join(formatted_metadata)} -c copy temp.mp3 && mv -f temp.mp3 {file}"


if __name__ == "__main__":
    from sys import argv
    from subprocess import run
    from json import dumps

    song_file = argv[1]
    m = get_metadata(song_file)
    f = make_ffmpeg_script(m)

    run(["xclip", "-selection", "clipboard"], input=f, text=True)
    print(dumps(m, indent=4, ensure_ascii=False))
