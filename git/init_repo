#!/usr/bin/env python
##? Help : Build project folder with git and open on vscode.
##? Usage: init_repo -n "name" -l "license" -i "languages".

import argparse, os, subprocess
from datetime import datetime
import requests

folders = [ "src", "test", "assets/data", "assets/img", "assets/docs", ".github/workflows", ".github/ISSUE_TEMPLATE", ".vscode", ]
files = [ "LICENSE.md", "README.md", ".gitignore", ".editorconfig", ".env", "Makefile", ".vscode/settings.json", ".vscode/code.code-snippets", ".vscode/tasks.json", ]


def build_structure():
    for f in folders:
        os.makedirs(f)
    subprocess.run(["git", "init"], cwd=os.getcwd())


def prepare_files():
    with open("todo.md", "w") as todo:
        for f in files:
            if not os.path.exists(f):
                print(f"ðŸ§ª Generate {f}")
                todo.write(f"ðŸ§ª Generate {f}\n")
            elif os.path.getsize(f) != 0:
                subprocess.run(["git", "add", f])
    subprocess.run(["git", "commit", "-m ðŸŽ‰ init(build): Set project environment."])

def name(folder_name: str):
    path = os.path.basename(os.getcwd())
    if not (folder_name == path):
        os.makedirs(folder_name)
        os.chdir(folder_name)
    with open("README.md", "a") as readme:
        title = f"{folder_name.capitalize().replace('-',' ')}"
        readme.write(f"# {title}\n")


def license(license_name: str):
    response = (requests.get(f"https://api.github.com/licenses/{license_name}").json().get("body"))
    git_user = (subprocess.check_output(["git", "config", "user.name"]).decode("utf-8").strip())
    response = response.replace("[year]", str(datetime.now().year)).replace( "[fullname]", git_user)
    open("LICENSE.md", "w").write(response)


def ignore(langs: str):
    langs = ",".join(langs.split(" "))
    response = requests.get(f"https://www.gitignore.io/api/{langs}").text
    open(".gitignore", "w").write(response)


def main():
    parser = argparse.ArgumentParser(description="Inicializar un proyecto git en vscode.")
    parser.add_argument("-n", "--name", help="Nombre del proyecto")
    parser.add_argument("-l", "--license", help="Licencia del proyecto")
    parser.add_argument("-i", "--ignore", help="Git ignore")
    args = parser.parse_args()

    if args.name: name(args.name)
    if args.license: license(args.license)
    if args.ignore: ignore(args.ignore)
    build_structure()
    prepare_files()
    subprocess.run(["code", "."])

main()
